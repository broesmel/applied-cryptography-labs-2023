#!/usr/bin/env python3
# from https://cryptohack.org/challenges/introduction/

import telnetlib
import json
from Crypto.Util.number import bytes_to_long, long_to_bytes
from gmpy2 import iroot


from rsa import rsa_enc, rsa_dec

"""
Ah! I have encrypted the flag with state of the art 4096-bit RSA.
nc aclabs.ethz.ch 50802 
"""

def xor(X: bytes, Y: bytes, *args):
    r = bytes(x ^ y for (x, y) in zip(X, Y))
    for a in args:
        r = xor(r, a)
    return r
def blockify(a, blocksize=16):
    return [a[i : i + blocksize] for i in range(0, len(a), blocksize)]


def readline():
    return tn.read_until(b"\n")
def json_recv():
    line = readline()
    return json.loads(line.decode())
def json_send(req):
    request = json.dumps(req).encode()
    tn.write(request + b"\n")

def snd_rcv(req):
    json_send(req)
    return json_recv()

tn = telnetlib.Telnet("aclabs.ethz.ch", 50802)



def main():
    # r_flag = snd_rcv({"command": "encrypted_flag"})
    r_flag = {'N': '498556962769721250386698555784341522227351293046864722014048273035364297220867207356255022966787483244123163550409674797402001582733674827730285372810785662387387134269085046723077931311438001657843350471028669739188347197599151086774000268942666620314182011681185446885092518612913086572307119090507367502641190975399943250537333661989676465907819134367312650215845248069829993732389350212839816934730825902186933172420966790757379013218758050434740731147403731531665316424261771286693028537219273224311302728018729812268608291513412656867614677873445095409927848023344909437652991008711496546947209458474049138271507903081135717793757600975140735120616778793798477163457764983692154376376514974386532285205065534662547221101448804103344762848666651048064365610392948933726944547996713844686925373152417264932241472402289538637497493190708326578229881713432383678675159011252783009974758594761406018314402556347907836552949339645177078556142975371919866248308950602929826004182060477645920200437228624337890473628927247352532574526407470892333766711744220071732313080597997722183417187438747466141175597471615093175019567561647314623165530969437727078197306923056105384333800398246492722136823858812845111863113130264615352920671237', 'e': '3', 'ctxt': '27986825396875236226203682988660679511262995552370760319955364853447683361056680116401053910781551822312397150107061751318254874297682048315115083741667635526811619517578667237635742244244319113583982270041328209225081464958934615991734579687013'}
    print(r_flag)
    flag_enc = int(r_flag['ctxt'])
    N = int(r_flag['N'])
    e = int(r_flag['e'])
    pk = (N, e)

    # flag_enc = flag ** e % N

    # newtons method
    # https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division
    # x_n+1 = x_n âˆ’ f(x_n)/f'(x_n)
    # f(x) = x^3 - flag_enc
    # f'(x) = 3x^2
    # x_n+1 = x_n - (x_n^3 - flag_enc) / (3x_n^2)


    flag = iroot(flag_enc, e)[0]   
    
    print(long_to_bytes(flag))


if __name__ == "__main__":
    main()
